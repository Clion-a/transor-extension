{"remainingRequest":"/Users/yankaikuo/Transor/transor-extension/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yankaikuo/Transor/transor-extension/src/components/TranslationSettings.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/yankaikuo/Transor/transor-extension/src/components/TranslationSettings.vue","mtime":1750866072584},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/babel-loader/lib/index.js","mtime":1744643640966},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/cache-loader/dist/cjs.js","mtime":1744643640207},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/vue-loader/lib/index.js","mtime":1744643641085}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IG1hcFN0YXRlLCBtYXBBY3Rpb25zLCBtYXBNdXRhdGlvbnMgfSBmcm9tICd2dWV4JwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUcmFuc2xhdGlvblNldHRpbmdzJywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aXZlQ29sbGFwc2U6IFtdLAogICAgICBleGNsdWRlZENsYXNzZXNTdHI6ICcnLAogICAgICB1aUxhbmd1YWdlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndHJhbnNvci11aS1sYW5ndWFnZScpIHx8ICd6aC1DTicsIC8vIOm7mOiupOS9v+eUqOeugOS9k+S4reaWhwogICAgICBpMThuOiBudWxsLCAvLyDkv53lrZhpMThu5a6e5L6LCiAgICAgIHNob3dBcGlLZXlOb3RpY2U6IGZhbHNlLCAvLyDmmK/lkKbmmL7npLpBUEkgS2V55o+Q56S6CiAgICAgIHNlcnZpY2VTdGF0ZXM6IHsKICAgICAgICBtaWNyb3NvZnRhcGk6IHRydWUsCiAgICAgICAgbWljcm9zb2Z0OiB0cnVlLAogICAgICAgIGdvb2dsZTogdHJ1ZSwKICAgICAgICBvcGVuYWk6IHRydWUsCiAgICAgICAgZGVlcHNlZWs6IHRydWUKICAgICAgfSwgLy8g5ZCE5pyN5Yqh55qE5ZCv55So54q25oCBCiAgICAgIHN0b3JhZ2VMaXN0ZW5lcjogbnVsbCwgLy8gc3RvcmFnZSDlj5jljJbnm5HlkKzlmagKICAgICAgYWlFeHBlcnRWaXNpYmlsaXR5OiB7fSwgLy8gQUnkuJPlrrbmmL7npLrnirbmgIEKICAgICAgdXNlckluZm86IG51bGwsIC8vIOa3u+WKoOeUqOaIt+S/oeaBrwogICAgICBpc1ByZW1pdW1Vc2VyOiBmYWxzZSwgLy8g5piv5ZCm5Li65Lya5ZGY55So5oi3CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoWwogICAgICAnaXNFbmFibGVkJywKICAgICAgJ2V4Y2x1ZGVkVGFncycsCiAgICAgICdleGNsdWRlZENsYXNzZXMnLAogICAgICAnY3VzdG9tQ3NzJywKICAgICAgJ29wZW5haUNvbmZpZycsCiAgICAgICdkZWVwc2Vla0NvbmZpZycsCiAgICAgICdhcGlLZXlzJwogICAgXSksCiAgICBpc1RyYW5zbGF0aW9uRW5hYmxlZDogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbmFibGVkCiAgICAgIH0sCiAgICAgIHNldCgpIHsKICAgICAgICAvLyDpgJrov4d0b2dnbGVUcmFuc2xhdGlvbuaTjeS9nOadpeS/ruaUuQogICAgICB9CiAgICB9LAogICAgdGFyZ2V0TGFuZzogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnRhcmdldExhbmd1YWdlOwogICAgICB9LAogICAgICBzZXQodmFsdWUpIHsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3NldFRhcmdldExhbmd1YWdlJywgdmFsdWUpOwogICAgICAgIHRoaXMuc2F2ZVNldHRpbmdzKCk7CiAgICAgIH0KICAgIH0sCiAgICBzb3VyY2VMYW5nOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc291cmNlTGFuZ3VhZ2U7CiAgICAgIH0sCiAgICAgIHNldCh2YWx1ZSkgewogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0U291cmNlTGFuZ3VhZ2UnLCB2YWx1ZSk7CiAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgICAgfQogICAgfSwKICAgIHRyYW5zRW5naW5lOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudHJhbnNsYXRpb25FbmdpbmU7CiAgICAgIH0sCiAgICAgIHNldCh2YWx1ZSkgewogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0VHJhbnNsYXRpb25FbmdpbmUnLCB2YWx1ZSk7CiAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgICAgfQogICAgfSwKICAgIHRyYW5zU3R5bGU6IHsKICAgICAgZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS50cmFuc2xhdGlvblN0eWxlOwogICAgICB9LAogICAgICBzZXQodmFsdWUpIHsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3NldFRyYW5zbGF0aW9uU3R5bGUnLCB2YWx1ZSk7CiAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgICAgfQogICAgfSwKICAgIGVuYWJsZUlucHV0U3BhY2VUcmFuc2xhdGlvbjogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmVuYWJsZUlucHV0U3BhY2VUcmFuc2xhdGlvbjsKICAgICAgfSwKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdzZXRFbmFibGVJbnB1dFNwYWNlVHJhbnNsYXRpb24nLCB2YWx1ZSk7CiAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgICAgfQogICAgfSwKICAgIG9wZW5haU1vZGVsOiB7CiAgICAgIGdldCgpIHsKICAgICAgICAvLyDlpoLmnpzmnIlvcGVuYWlDb25maWfvvIzku47kuK3ojrflj5YKICAgICAgICBpZiAodGhpcy4kc3RvcmUuc3RhdGUub3BlbmFpQ29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUub3BlbmFpQ29uZmlnLm1vZGVsOwogICAgICAgIH0KICAgICAgICAvLyDlkKbliJnkvb/nlKjml6fnmoTlrZfmrrUKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUub3BlbmFpTW9kZWw7CiAgICAgIH0sCiAgICAgIHNldCh2YWx1ZSkgewogICAgICAgIC8vIOS/neaMgeaXp+Wtl+auteWFvOWuuQogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0T3BlbmFpTW9kZWwnLCB2YWx1ZSk7CiAgICAgICAgCiAgICAgICAgLy8g5ZCM5pe25pu05paw5paw55qE6YWN572u57uT5p6ECiAgICAgICAgaWYgKHRoaXMuJHN0b3JlLnN0YXRlLm9wZW5haUNvbmZpZykgewogICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVPcGVuYWlDb25maWcnLCB7IGtleTogJ21vZGVsJywgdmFsdWUgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgb3BlbmFpRXhwZXJ0U3RyYXRlZ3k6IHsKICAgICAgZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5vcGVuYWlDb25maWcgJiYgdGhpcy4kc3RvcmUuc3RhdGUub3BlbmFpQ29uZmlnLmV4cGVydFN0cmF0ZWd5IAogICAgICAgICAgPyB0aGlzLiRzdG9yZS5zdGF0ZS5vcGVuYWlDb25maWcuZXhwZXJ0U3RyYXRlZ3kgCiAgICAgICAgICA6ICd0cmFuc2xhdGlvbi1tYXN0ZXInOwogICAgICB9LAogICAgICBzZXQodmFsdWUpIHsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZU9wZW5haUNvbmZpZycsIHsga2V5OiAnZXhwZXJ0U3RyYXRlZ3knLCB2YWx1ZSB9KTsKICAgICAgfQogICAgfSwKICAgIG9wZW5haUFpQ29udGV4dDogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm9wZW5haUNvbmZpZyAmJiB0aGlzLiRzdG9yZS5zdGF0ZS5vcGVuYWlDb25maWcuYWlDb250ZXh0IAogICAgICAgICAgPyB0aGlzLiRzdG9yZS5zdGF0ZS5vcGVuYWlDb25maWcuYWlDb250ZXh0IAogICAgICAgICAgOiBmYWxzZTsKICAgICAgfSwKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVPcGVuYWlDb25maWcnLCB7IGtleTogJ2FpQ29udGV4dCcsIHZhbHVlIH0pOwogICAgICB9CiAgICB9LAogICAgZGVlcHNlZWtNb2RlbDogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmRlZXBzZWVrQ29uZmlnICYmIHRoaXMuJHN0b3JlLnN0YXRlLmRlZXBzZWVrQ29uZmlnLm1vZGVsCiAgICAgICAgICA/IHRoaXMuJHN0b3JlLnN0YXRlLmRlZXBzZWVrQ29uZmlnLm1vZGVsCiAgICAgICAgICA6ICdkZWVwc2Vlay1jaGF0JzsKICAgICAgfSwKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVEZWVwc2Vla0NvbmZpZycsIHsga2V5OiAnbW9kZWwnLCB2YWx1ZSB9KTsKICAgICAgfQogICAgfSwKICAgIGRlZXBzZWVrRXhwZXJ0U3RyYXRlZ3k6IHsKICAgICAgZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5kZWVwc2Vla0NvbmZpZyAmJiB0aGlzLiRzdG9yZS5zdGF0ZS5kZWVwc2Vla0NvbmZpZy5leHBlcnRTdHJhdGVneQogICAgICAgICAgPyB0aGlzLiRzdG9yZS5zdGF0ZS5kZWVwc2Vla0NvbmZpZy5leHBlcnRTdHJhdGVneQogICAgICAgICAgOiAndHJhbnNsYXRpb24tbWFzdGVyJzsKICAgICAgfSwKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVEZWVwc2Vla0NvbmZpZycsIHsga2V5OiAnZXhwZXJ0U3RyYXRlZ3knLCB2YWx1ZSB9KTsKICAgICAgfQogICAgfSwKICAgIGRlZXBzZWVrQWlDb250ZXh0OiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuZGVlcHNlZWtDb25maWcgJiYgdGhpcy4kc3RvcmUuc3RhdGUuZGVlcHNlZWtDb25maWcuYWlDb250ZXh0CiAgICAgICAgICA/IHRoaXMuJHN0b3JlLnN0YXRlLmRlZXBzZWVrQ29uZmlnLmFpQ29udGV4dAogICAgICAgICAgOiBmYWxzZTsKICAgICAgfSwKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVEZWVwc2Vla0NvbmZpZycsIHsga2V5OiAnYWlDb250ZXh0JywgdmFsdWUgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDmo4Dmn6XmmK/lkKblupTor6XmmL7npLpBSeS4k+WutuetlueVpemAieaLqeWZqAogICAgc2hvd0FpRXhwZXJ0U3RyYXRlZ3koKSB7CiAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMudHJhbnNFbmdpbmU7CiAgICAgIAogICAgICAvLyDmo4Dmn6XmmK/lkKbmnInlr7nlupTnmoRBUEkgS2V5CiAgICAgIGlmIChlbmdpbmUgPT09ICdvcGVuYWknKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXBpS2V5cyAmJiB0aGlzLmFwaUtleXMub3BlbmFpICYmIHRoaXMuYXBpS2V5cy5vcGVuYWkudHJpbSgpICE9PSAnJzsKICAgICAgfSBlbHNlIGlmIChlbmdpbmUgPT09ICdkZWVwc2VlaycpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcGlLZXlzICYmIHRoaXMuYXBpS2V5cy5kZWVwc2VlayAmJiB0aGlzLmFwaUtleXMuZGVlcHNlZWsudHJpbSgpICE9PSAnJzsKICAgICAgfQogICAgICAKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIC8vIOiOt+WPluW9k+WJjemAieaLqeeahEFJ5byV5pOO55qE5LiT5a62562W55WlCiAgICBjdXJyZW50QWlFeHBlcnRTdHJhdGVneSgpIHsKICAgICAgaWYgKHRoaXMudHJhbnNFbmdpbmUgPT09ICdvcGVuYWknICYmIHRoaXMub3BlbmFpQ29uZmlnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMub3BlbmFpQ29uZmlnLmV4cGVydFN0cmF0ZWd5IHx8ICd0cmFuc2xhdGlvbi1tYXN0ZXInOwogICAgICB9IGVsc2UgaWYgKHRoaXMudHJhbnNFbmdpbmUgPT09ICdkZWVwc2VlaycgJiYgdGhpcy5kZWVwc2Vla0NvbmZpZykgewogICAgICAgIHJldHVybiB0aGlzLmRlZXBzZWVrQ29uZmlnLmV4cGVydFN0cmF0ZWd5IHx8ICd0cmFuc2xhdGlvbi1tYXN0ZXInOwogICAgICB9CiAgICAgIHJldHVybiAndHJhbnNsYXRpb24tbWFzdGVyJzsKICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICAuLi5tYXBBY3Rpb25zKFsKICAgICAgJ3NhdmVTZXR0aW5ncycsCiAgICAgICd0b2dnbGVUcmFuc2xhdGlvbicKICAgIF0pLAogICAgLi4ubWFwTXV0YXRpb25zKFsKICAgICAgJ3NldEV4Y2x1ZGVkVGFncycsCiAgICAgICdzZXRFeGNsdWRlZENsYXNzZXMnLAogICAgICAnc2V0Q3VzdG9tQ3NzJywKICAgICAgJ3NldEFwaUtleScsCiAgICAgICd1cGRhdGVPcGVuYWlDb25maWcnLAogICAgICAndXBkYXRlRGVlcHNlZWtDb25maWcnCiAgICBdKSwKICAgIC8vIOWkhOeQhumUruebmOW/q+aNt+mUrgogICAgaGFuZGxlS2V5Ym9hcmRTaG9ydGN1dChldmVudCkgewogICAgICAvLyDorrDlvZXmjInplK7kv6Hmga/ku6Xkvr/osIPor5UKICAgICAgY29uc29sZS5sb2coJ+mUruebmOS6i+S7tjonLCB7CiAgICAgICAga2V5OiBldmVudC5rZXksCiAgICAgICAgY29kZTogZXZlbnQuY29kZSwKICAgICAgICBrZXlDb2RlOiBldmVudC5rZXlDb2RlLAogICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LAogICAgICAgIG1ldGFLZXk6IGV2ZW50Lm1ldGFLZXksCiAgICAgICAgY3RybEtleTogZXZlbnQuY3RybEtleQogICAgICB9KTsKCiAgICAgIC8vIE1hY+ezu+e7n+S4ik9wdGlvbitB5Y+v6IO95Lya6KKr6Kej6YeK5Li654m55q6K5a2X56ym77yM5omA5Lul5qOA5p+l5aSa56eN5Y+v6IO955qE5oOF5Ya1CiAgICAgIGNvbnN0IGlzQWx0QVByZXNzZWQgPQogICAgICAgIC8vIOagh+WHhuajgOa1i+aWueW8jwogICAgICAgIChldmVudC5hbHRLZXkgJiYgKGV2ZW50LmtleSA9PT0gJ2EnIHx8IGV2ZW50LmtleSA9PT0gJ0EnKSkgfHwKICAgICAgICAvLyBNYWPkuIpPcHRpb24rQeWPr+iDveeUn+aIkOeahOeJueauiuWtl+espgogICAgICAgIChldmVudC5rZXkgPT09ICfDpScgfHwgZXZlbnQua2V5ID09PSAnw4UnKSB8fAogICAgICAgIC8vIOS9v+eUqGtleUNvZGXmo4DmtYsgKDY15piv5a2X5q+NQeeahGtleUNvZGUpCiAgICAgICAgKGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSA2NSk7CgogICAgICBpZiAoaXNBbHRBUHJlc3NlZCkgewogICAgICAgIGNvbnNvbGUubG9nKCfmo4DmtYvliLDlv6vmjbfplK4g4oylQSAoT3B0aW9uK0EpJyk7CiAgICAgICAgLy8g6Zi75q2i6buY6K6k6KGM5Li677yM5Lul6Ziy5q2i54m55q6K5a2X56ym6L6T5YWlCiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgdGhpcy50b2dnbGVUcmFuc2xhdGlvbigpOwoKICAgICAgICAvLyDnu5nnv7vor5HmjInpkq7mt7vliqDop4bop4nlj43ppogKICAgICAgICBjb25zdCB0cmFuc2xhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHJhbnNsYXRlLWJ1dHRvbiBidXR0b24nKTsKICAgICAgICBpZiAodHJhbnNsYXRlQnV0dG9uKSB7CiAgICAgICAgICB0cmFuc2xhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgdHJhbnNsYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpOwogICAgICAgICAgfSwgMTUwKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAvLyDnv7vor5HovoXliqnlh73mlbAKICAgICR0KGtleSkgewogICAgICAvLyDlpoLmnpwgVnVlIOeahCBpMThuIOWunuS+i+WtmOWcqO+8jOS9v+eUqOWugwogICAgICBpZiAodGhpcy4kaTE4biAmJiB0aGlzLiRpMThuLnQpIHsKICAgICAgICByZXR1cm4gdGhpcy4kaTE4bi50KGtleSk7CiAgICAgIH0KCiAgICAgIC8vIOWQpuWImeWwneivleS9v+eUqOWFqOWxgCBpMThuIOWvueixoQogICAgICBpZiAod2luZG93LmkxOG4gJiYgd2luZG93LmkxOG4udCkgewogICAgICAgIHJldHVybiB3aW5kb3cuaTE4bi50KGtleSk7CiAgICAgIH0KCiAgICAgIC8vIOWmguaenOmDveayoeacie+8jOWwneivleS7juacrOWcsOaVsOaNruiOt+WPlgogICAgICBpZiAodGhpcy5pMThuICYmIHR5cGVvZiB0aGlzLmkxOG4udCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHJldHVybiB0aGlzLmkxOG4udChrZXkpOwogICAgICB9CgogICAgICAvLyDmnIDlkI7lm57pgIDliLDlvZPliY3nu4Tku7bkuIrkuIvmlofkuK3nmoTnm7TmjqXplK7lgLzmn6Xmib4KICAgICAgLy8g6L+Z6YeM5L2c5Li65pyA5ZCO55qE5Zue6YCA562W55Wl77yM5Y+v5Lul5Zyo57uE5Lu25Lit5a6a5LmJ566A5Y2V55qE5pys5Zyw57+76K+R5a+56LGhCiAgICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IHsKICAgICAgICAnemgtQ04nOiB7CiAgICAgICAgICAnc291cmNlX2xhbmd1YWdlJzogJ+e/u+ivkeivreiogCcsCiAgICAgICAgICAndGFyZ2V0X2xhbmd1YWdlJzogJ+ebruagh+ivreiogCcsCiAgICAgICAgICAndHJhbnNsYXRpb25fc2VydmljZSc6ICfnv7vor5HmnI3liqHvvJonLAogICAgICAgICAgJ2Rpc3BsYXlfdHlwZSc6ICfmmL7npLrnsbvlnovvvJonLAogICAgICAgICAgJ3VpX2xhbmd1YWdlJzogJ+eVjOmdouivreiogO+8micsCiAgICAgICAgICAndHJhbnNsYXRpb25fdG9nZ2xlJzogJ+e/u+ivkeW8gOWFsycsCiAgICAgICAgICAndG9nZ2xlX3RyYW5zbGF0aW9uJzogJ+W8gOWQry/lhbPpl63nv7vor5EnLAogICAgICAgICAgJ2lubGluZSc6ICflj4zor60o5Y6f5paH5ZCO5pa55pi+56S66K+R5paHKScsCiAgICAgICAgICAnZ2VuZXJhbCc6ICflr7zoiKrmj5DnpLoo6YCC5ZCI6I+c5Y2V5ZKM5bCP5YWD57SgKScsCiAgICAgICAgICAncmVwbGFjZSc6ICfmm7/mjaIo5LuF5pi+56S66K+R5paHKScsCiAgICAgICAgICAnYmlsaW5ndWFsX2JlbG93JzogJ+WPjOivrSjljp/mlofkuIvmlrnmmL7npLror5HmlocpJywKICAgICAgICAgICdob3Zlcic6ICfmgqzmta4o6byg5qCH5oKs5YGc5pi+56S66K+R5paHKScsCiAgICAgICAgICAnZGVlcHNlZWtfYXBpX2tleSc6ICdEZWVwU2VlayBBUEnlr4bpkqUnLAogICAgICAgICAgJ2VudGVyX2RlZXBzZWVrX2FwaV9rZXknOiAn6K+36L6T5YWl5L2g55qERGVlcFNlZWsgQVBJ5a+G6ZKlJywKICAgICAgICAgICdvcGVuYWlfYXBpX2tleSc6ICdPcGVuQUkgQVBJ5a+G6ZKlJywKICAgICAgICAgICdlbnRlcl9vcGVuYWlfYXBpX2tleSc6ICfor7fovpPlhaXkvaDnmoRPcGVuQUkgQVBJ5a+G6ZKlJywKICAgICAgICAgICdvcGVuYWlfbW9kZWwnOiAnT3BlbkFJ5qih5Z6LJywKICAgICAgICAgICdpbnB1dF90cmlwbGVfc3BhY2VfdGlwJzogJ+Wwj+aKgOW3p++8muWcqOS7u+aEj+i+k+WFpeahhuS4rei+k+WFpeaWh+acrOWQju+8jOi/nue7reaVsuWHu+S4ieS4quepuuagvOWPr+S7peeri+WNs+e/u+ivkeaWh+acrOOAguaMiUVTQ+mUruWPr+WPlua2iOe/u+ivkeOAgicsCiAgICAgICAgICAnaW5wdXRfc3BhY2VfdHJhbnNsYXRpb25fdG9nZ2xlJzogJ+i+k+WFpeahhuepuuagvOe/u+ivkScsCiAgICAgICAgICAnYXBpS2V5UmVxdWlyZWQnOiAn6ZyA6KaB6K6+572uQVBJ5a+G6ZKl5omN6IO95L2/55So5q2k5pyN5YqhJywKICAgICAgICAgICdwcmVtaXVtTG9naW5SZXF1aXJlZCc6ICfpq5jnuqfmqKHlnovpnIDopoHnmbvlvZXmiY3og73kvb/nlKgnLAogICAgICAgICAgJ2dvVG9TZXR0aW5ncyc6ICfliY3lvoDorr7nva7pobXpnaInLAogICAgICAgICAgJ2dvVG9Qcm9maWxlJzogJ+WJjeW+gOS4quS6uui1hOaWmemhtemdoicsCiAgICAgICAgICAnYWlFeHBlcnRTdHJhdGVneSc6ICdBSeS4k+WutuetlueVpScsCiAgICAgICAgICAndHJhbnNsYXRpb25NYXN0ZXInOiAn5oSP6K+R5aSn5biIJywKICAgICAgICAgICdsaXRlcmFsRXhwZXJ0JzogJ+ebtOivkeS4k+WuticsCiAgICAgICAgICAnY29udGV4dEFuYWx5emVyJzogJ+ivreWig+WIhuaekOW4iCcsCiAgICAgICAgICAnY3VsdHVyYWxBZGFwdGVyJzogJ+aWh+WMlumAgumFjeW4iCcsCiAgICAgICAgICAnZW5hYmxlQWlDb250ZXh0JzogJ+WQr+eUqEFJ5pm66IO95LiK5LiL5paHJywKICAgICAgICAgIC8vIOWFtuS7luWfuuacrOe/u+ivkS4uLgogICAgICAgIH0sCiAgICAgICAgJ2VuJzogewogICAgICAgICAgJ3NvdXJjZV9sYW5ndWFnZSc6ICdTb3VyY2UgTGFuZ3VhZ2UnLAogICAgICAgICAgJ3RhcmdldF9sYW5ndWFnZSc6ICdUYXJnZXQgTGFuZ3VhZ2UnLAogICAgICAgICAgJ3RyYW5zbGF0aW9uX3NlcnZpY2UnOiAnVHJhbnNsYXRpb24gU2VydmljZTonLAogICAgICAgICAgJ2Rpc3BsYXlfdHlwZSc6ICdEaXNwbGF5IFR5cGU6JywKICAgICAgICAgICd1aV9sYW5ndWFnZSc6ICdJbnRlcmZhY2UgTGFuZ3VhZ2U6JywKICAgICAgICAgICd0cmFuc2xhdGlvbl90b2dnbGUnOiAnVHJhbnNsYXRpb24gVG9nZ2xlJywKICAgICAgICAgICd0b2dnbGVfdHJhbnNsYXRpb24nOiAnRW5hYmxlL0Rpc2FibGUgVHJhbnNsYXRpb24nLAogICAgICAgICAgJ2lubGluZSc6ICdCaWxpbmd1YWwgKFRyYW5zbGF0aW9uIGFmdGVyIE9yaWdpbmFsKScsCiAgICAgICAgICAnZ2VuZXJhbCc6ICdTbWFydCBUb29sdGlwcyAoRm9yIE1lbnVzICYgU21hbGwgRWxlbWVudHMpJywKICAgICAgICAgICdyZXBsYWNlJzogJ1JlcGxhY2UgKFRyYW5zbGF0aW9uIE9ubHkpJywKICAgICAgICAgICdiaWxpbmd1YWxfYmVsb3cnOiAnQmlsaW5ndWFsIChUcmFuc2xhdGlvbiBCZWxvdyknLAogICAgICAgICAgJ2hvdmVyJzogJ0hvdmVyIChTaG93IG9uIE1vdXNlIE92ZXIpJywKICAgICAgICAgICdkZWVwc2Vla19hcGlfa2V5JzogJ0RlZXBTZWVrIEFQSSBLZXknLAogICAgICAgICAgJ2VudGVyX2RlZXBzZWVrX2FwaV9rZXknOiAnRW50ZXIgeW91ciBEZWVwU2VlayBBUEkgS2V5JywKICAgICAgICAgICdvcGVuYWlfYXBpX2tleSc6ICdPcGVuQUkgQVBJIEtleScsCiAgICAgICAgICAnZW50ZXJfb3BlbmFpX2FwaV9rZXknOiAnRW50ZXIgeW91ciBPcGVuQUkgQVBJIEtleScsCiAgICAgICAgICAnb3BlbmFpX21vZGVsJzogJ09wZW5BSSBNb2RlbCcsCiAgICAgICAgICAnaW5wdXRfdHJpcGxlX3NwYWNlX3RpcCc6ICdUaXA6IEluIGFueSBpbnB1dCBmaWVsZCwgYWZ0ZXIgdHlwaW5nIHRleHQsIHByZXNzIHNwYWNlIHRocmVlIHRpbWVzIGluIGEgcm93IHRvIGluc3RhbnRseSB0cmFuc2xhdGUgdGhlIHRleHQuIFByZXNzIEVTQyB0byBjYW5jZWwgdHJhbnNsYXRpb24uJywKICAgICAgICAgICdpbnB1dF9zcGFjZV90cmFuc2xhdGlvbl90b2dnbGUnOiAnSW5wdXQgU3BhY2UgVHJhbnNsYXRpb24nLAogICAgICAgICAgJ2FwaUtleVJlcXVpcmVkJzogJ0FQSSBLZXkgaXMgcmVxdWlyZWQgdG8gdXNlIHRoaXMgc2VydmljZScsCiAgICAgICAgICAncHJlbWl1bUxvZ2luUmVxdWlyZWQnOiAnUHJlbWl1bSBtb2RlbHMgcmVxdWlyZSBsb2dpbiB0byB1c2UnLAogICAgICAgICAgJ2dvVG9TZXR0aW5ncyc6ICdHbyB0byBTZXR0aW5ncycsCiAgICAgICAgICAnZ29Ub1Byb2ZpbGUnOiAnR28gdG8gUHJvZmlsZSBQYWdlJywKICAgICAgICAgICdhaUV4cGVydFN0cmF0ZWd5JzogJ0FJIEV4cGVydCBTdHJhdGVneScsCiAgICAgICAgICAndHJhbnNsYXRpb25NYXN0ZXInOiAnVHJhbnNsYXRpb24gTWFzdGVyJywKICAgICAgICAgICdsaXRlcmFsRXhwZXJ0JzogJ0xpdGVyYWwgRXhwZXJ0JywKICAgICAgICAgICdjb250ZXh0QW5hbHl6ZXInOiAnQ29udGV4dCBBbmFseXplcicsCiAgICAgICAgICAnY3VsdHVyYWxBZGFwdGVyJzogJ0N1bHR1cmFsIEFkYXB0ZXInLAogICAgICAgICAgJ2VuYWJsZUFpQ29udGV4dCc6ICdFbmFibGUgQUkgQ29udGV4dCcsCiAgICAgICAgICAvLyDlhbbku5bln7rmnKznv7vor5EuLi4KICAgICAgICB9CiAgICAgIH07CgogICAgICAvLyDojrflj5blvZPliY3or63oqIDnmoTnv7vor5EKICAgICAgY29uc3QgbGFuZyA9IHRoaXMudWlMYW5ndWFnZSB8fCAnemgtQ04nOwogICAgICByZXR1cm4gdHJhbnNsYXRpb25zW2xhbmddICYmIHRyYW5zbGF0aW9uc1tsYW5nXVtrZXldID8gdHJhbnNsYXRpb25zW2xhbmddW2tleV0gOiBrZXk7CiAgICB9LAogICAgdHJhbnNsYXRlQ3VycmVudFBhZ2UoKSB7CiAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sICh0YWJzKSA9PiB7CiAgICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFic1swXS5pZCwgeyBhY3Rpb246ICd0cmFuc2xhdGUnIH0pCiAgICAgIH0pCiAgICB9LAogICAgc2F2ZUV4Y2x1ZGVkVGFncygpIHsKICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKQogICAgfSwKICAgIHNhdmVFeGNsdWRlZENsYXNzZXMoKSB7CiAgICAgIHRoaXMuc2V0RXhjbHVkZWRDbGFzc2VzKHRoaXMuZXhjbHVkZWRDbGFzc2VzU3RyLnNwbGl0KCcsJykubWFwKGNscyA9PiBjbHMudHJpbSgpKS5maWx0ZXIoY2xzID0+IGNscykpCiAgICAgIHRoaXMuc2F2ZVNldHRpbmdzKCkKICAgIH0sCiAgICBzYXZlQ3VzdG9tQ3NzKCkgewogICAgICB0aGlzLnNldEN1c3RvbUNzcyh0aGlzLmN1c3RvbUNzcykKICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKQogICAgfSwKICAgIC8vIOaWsOWinueVjOmdouivreiogOWIh+aNouaWueazlQogICAgY2hhbmdlVWlMYW5ndWFnZShsYW5ndWFnZSkgewogICAgICBjb25zb2xlLmxvZyhg5YiH5o2i55WM6Z2i6K+t6KiA5Li6OiAke2xhbmd1YWdlfWApOwogICAgICAvLyDkv53lrZjnlKjmiLfnmoTnlYzpnaLor63oqIDpppbpgInpobnliLDmnKzlnLDlrZjlgqgKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RyYW5zb3ItdWktbGFuZ3VhZ2UnLCBsYW5ndWFnZSk7CgogICAgICAvLyDkvb/nlKjmm7TlronlhajnmoTmlrnlvI/kv53lrZjor63oqIDorr7nva4KICAgICAgY29uc3Qgc2F2ZUxhbmd1YWdlU2V0dGluZyA9ICgpID0+IHsKICAgICAgICAvLyDpppblhYjnm7TmjqXlsJ3or5XpgJrov4dzdG9yYWdlIEFQSeiuvue9rgogICAgICAgIHRyeSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhg55u05o6l5L+d5a2Y55WM6Z2i6K+t6KiA5Yiwc3RvcmFnZTogJHtsYW5ndWFnZX1gKTsKICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICd0cmFuc29yLXVpLWxhbmd1YWdlJzogbGFuZ3VhZ2UgfSwgKCkgPT4gewogICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfnm7TmjqXorr7nva7or63oqIDlpLHotKU6JywgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygn55WM6Z2i6K+t6KiA5bey55u05o6l5L+d5a2Y5Yiwc3RvcmFnZScpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCfnm7TmjqXorr7nva7or63oqIDlvILluLg6JywgZS5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8g54S25ZCO5Lmf5bCd6K+V6YCa6L+HYmFja2dyb3VuZOiEmuacrOiuvue9rgogICAgICAgIHRyeSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhg6YCa6L+HYmFja2dyb3VuZOiuvue9rueVjOmdouivreiogDogJHtsYW5ndWFnZX1gKTsKICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgCiAgICAgICAgICAgIGFjdGlvbjogJ3NldC1sYW5ndWFnZScsIAogICAgICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UgCiAgICAgICAgICB9LCByZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHsKICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+mAmui/h2JhY2tncm91bmTorr7nva7or63oqIDlpLHotKU6JywgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+mAmui/h2JhY2tncm91bmTmiJDlip/orr7nva7or63oqIAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcign5Y+R6YCB6K+t6KiA6K6+572u5raI5oGv5byC5bi4OicsIGUubWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9OwogICAgICAKICAgICAgLy8g5bCd6K+V5L+d5a2Y6K6+572uCiAgICAgIHNhdmVMYW5ndWFnZVNldHRpbmcoKTsKICAgICAgCiAgICAgIC8vIOeri+WNs+W6lOeUqOacrOWcsOivreiogOiuvue9rgogICAgICB0aGlzLnVpTGFuZ3VhZ2UgPSBsYW5ndWFnZTsKICAgICAgdGhpcy5sb2FkTGFuZ3VhZ2VSZXNvdXJjZXMobGFuZ3VhZ2UpOwogICAgICAKICAgICAgLy8g6Kem5Y+R5LqL5Lu26YCa55+l5bqU55So6K+t6KiA5bey5pu05pS5CiAgICAgIHRoaXMuJGVtaXQoJ2xhbmd1YWdlLWNoYW5nZWQnLCBsYW5ndWFnZSk7CiAgICB9LAogICAgbG9hZExhbmd1YWdlUmVzb3VyY2VzKGxhbmd1YWdlKSB7CiAgICAgIGNvbnNvbGUubG9nKGDmraPlnKjliqDovb0ke2xhbmd1YWdlfeivreiogOi1hOa6kC4uLmApOwoKICAgICAgLy8g5aaC5p6c5ZyoVnVl5bqU55So5Lit77yM5bCd6K+V5L2/55SoVnVl55qEaTE4buezu+e7nwogICAgICBpZiAodGhpcy4kaTE4biAmJiB0eXBlb2YgdGhpcy4kaTE4bi5sb2NhbGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgdGhpcy4kaTE4bi5sb2NhbGUgPSBsYW5ndWFnZTsKICAgICAgfQoKICAgICAgLy8g5aaC5p6c5pyJ5YWo5bGAaTE4buWvueixoe+8jOS9v+eUqOWug+adpeiuvue9ruivreiogAogICAgICBpZiAod2luZG93LmkxOG4gJiYgdHlwZW9mIHdpbmRvdy5pMThuLnNldExhbmd1YWdlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgd2luZG93LmkxOG4uc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpOwogICAgICB9CgogICAgICAvLyDlvLrliLbnu4Tku7bph43mlrDmuLLmn5MKICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKTsKICAgIH0sCiAgICAvLyDlpITnkIbkuJPlrrbnrZbnlaXlj5jljJYKICAgIGhhbmRsZUV4cGVydFN0cmF0ZWd5Q2hhbmdlKHN0cmF0ZWd5KSB7CiAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMudHJhbnNFbmdpbmU7CiAgICAgIAogICAgICBpZiAoZW5naW5lID09PSAnb3BlbmFpJykgewogICAgICAgIHRoaXMudXBkYXRlT3BlbmFpQ29uZmlnKHsga2V5OiAnZXhwZXJ0U3RyYXRlZ3knLCB2YWx1ZTogc3RyYXRlZ3kgfSk7CiAgICAgIH0gZWxzZSBpZiAoZW5naW5lID09PSAnZGVlcHNlZWsnKSB7CiAgICAgICAgdGhpcy51cGRhdGVEZWVwc2Vla0NvbmZpZyh7IGtleTogJ2V4cGVydFN0cmF0ZWd5JywgdmFsdWU6IHN0cmF0ZWd5IH0pOwogICAgICB9CiAgICAgIAogICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgfSwKICAgIC8vIOWkhOeQhumrmOe6p+aooeWei+mAiemhueeCueWHuwogICAgaGFuZGxlUHJlbWl1bU9wdGlvbkNsaWNrKG9wdGlvbikgewogICAgICAvLyDmo4Dmn6XnlKjmiLfmmK/lkKbkuLrkvJrlkZgKICAgICAgaWYgKCF0aGlzLnVzZXJJbmZvIHx8ICF0aGlzLmlzUHJlbWl1bVVzZXIpIHsKICAgICAgICBjb25zb2xlLmxvZyhgJHtvcHRpb259IOmAiemhuemcgOimgeS8muWRmOaJjeiDveS9v+eUqO+8jOi3s+i9rOWIsOS4quS6uui1hOaWmemhtemdomApOwogICAgICAgIAogICAgICAgIC8vIOi3s+i9rOWIsOS4quS6uui1hOaWmemhtemdogogICAgICAgIHdpbmRvdy5vcGVuKCdodHRwOi8vbG9jYWxob3N0OjgwODAvcHJvZmlsZScsICdfYmxhbmsnKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICAvLyDosIPmlbRoYW5kbGVFbmdpbmVDaGFuZ2Xmlrnms5UKICAgIGhhbmRsZUVuZ2luZUNoYW5nZSgpIHsKICAgICAgY29uc3QgZW5naW5lID0gdGhpcy50cmFuc0VuZ2luZTsKICAgICAgCiAgICAgIC8vIOajgOafpeaYr+WQpuS4uumrmOe6p+aooeWei+S4lOeUqOaIt+mdnuS8muWRmAogICAgICBjb25zdCBwcmVtaXVtRW5naW5lcyA9IFsnY2hhdGdwdC00bycsICdjaGF0Z3B0LTRvLW1pbmknLCAnZGVlcHNlZWstdjMnLCAnZ2VtaW5pLTItZmxhc2gnLCAnZGVlcGwnXTsKICAgICAgaWYgKHByZW1pdW1FbmdpbmVzLmluY2x1ZGVzKGVuZ2luZSkgJiYgKCF0aGlzLnVzZXJJbmZvIHx8ICF0aGlzLmlzUHJlbWl1bVVzZXIpKSB7CiAgICAgICAgY29uc29sZS5sb2coYCR7ZW5naW5lfSDpnIDopoHkvJrlkZjmiY3og73kvb/nlKjvvIzot7PovazliLDkuKrkurrotYTmlpnpobXpnaJgKTsKICAgICAgICAvLyDot7PovazliLDkuKrkurrotYTmlpnpobXpnaIKICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL2xvY2FsaG9zdDo4MDgwL3Byb2ZpbGUnLCAnX2JsYW5rJyk7CiAgICAgICAgCiAgICAgICAgLy8g6YeN572u5Li656ys5LiA5Liq5Y+v55So55qE5pmu6YCa5qih5Z6LCiAgICAgICAgY29uc3QgYXZhaWxhYmxlRW5naW5lcyA9IE9iamVjdC5rZXlzKHRoaXMuc2VydmljZVN0YXRlcykuZmlsdGVyKGtleSA9PiAKICAgICAgICAgIHRoaXMuc2VydmljZVN0YXRlc1trZXldICYmICFwcmVtaXVtRW5naW5lcy5pbmNsdWRlcyhrZXkpCiAgICAgICAgKTsKICAgICAgICBpZiAoYXZhaWxhYmxlRW5naW5lcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICB0aGlzLnRyYW5zRW5naW5lID0gYXZhaWxhYmxlRW5naW5lc1swXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIAogICAgICAvLyDph43nva5BUEkgS2V55o+Q56S654q25oCBCiAgICAgIHRoaXMuc2hvd0FwaUtleU5vdGljZSA9IGZhbHNlOwogICAgICAKICAgICAgLy8g5a+55LqO6auY57qn5qih5Z6L77yM5qOA5p+l55So5oi355m75b2V54q25oCBCiAgICAgIGlmIChwcmVtaXVtRW5naW5lcy5pbmNsdWRlcyhlbmdpbmUpKSB7CiAgICAgICAgLy8g5qOA5p+l5piv5ZCm5pyJ6K6k6K+B5Luk54mMCiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsnYXV0aFRva2VuJ10sIChyZXN1bHQpID0+IHsKICAgICAgICAgIGlmICghcmVzdWx0LmF1dGhUb2tlbikgewogICAgICAgICAgICBjb25zb2xlLmxvZygn6auY57qn5qih5Z6L6ZyA6KaB55m75b2V77yM5pi+56S655m75b2V5o+Q56S6Jyk7CiAgICAgICAgICAgIHRoaXMuc2hvd0FwaUtleU5vdGljZSA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoZW5naW5lID09PSAnb3BlbmFpJyB8fCBlbmdpbmUgPT09ICdkZWVwc2VlaycpIHsKICAgICAgICAvLyDmo4Dmn6XkvKDnu59BSeW8leaTjuaYr+WQpumcgOimgUFQSSBLZXkKICAgICAgICBjb25zdCBhcGlLZXkgPSB0aGlzLmFwaUtleXMgJiYgdGhpcy5hcGlLZXlzW2VuZ2luZV07CiAgICAgICAgCiAgICAgICAgaWYgKCFhcGlLZXkgfHwgYXBpS2V5LnRyaW0oKSA9PT0gJycpIHsKICAgICAgICAgIC8vIOayoeaciUFQSSBLZXnvvIzmmL7npLrmj5DnpLoKICAgICAgICAgIHRoaXMuc2hvd0FwaUtleU5vdGljZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICAgIAogICAgICAvLyDkv53lrZjorr7nva4KICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgIH0sCiAgICAvLyDmiZPlvIDorr7nva7pobXpnaIKICAgIG9wZW5PcHRpb25zUGFnZSgpIHsKICAgICAgaWYgKGNocm9tZSAmJiBjaHJvbWUucnVudGltZSkgewogICAgICAgIGNocm9tZS5ydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIOWQjuWkh+aWueahiO+8muWwneivleebtOaOpeaJk+W8gG9wdGlvbnMuaHRtbAogICAgICAgIHdpbmRvdy5vcGVuKGNocm9tZS5ydW50aW1lLmdldFVSTCgnb3B0aW9ucy5odG1sJyksICdfYmxhbmsnKTsKICAgICAgfQogICAgfSwKICAgIC8vIOaJk+W8gOS4quS6uui1hOaWmemhtemdogogICAgb3BlblByb2ZpbGVQYWdlKCkgewogICAgICB3aW5kb3cub3BlbignaHR0cDovL2xvY2FsaG9zdDo4MDgwL3Byb2ZpbGUnLCAnX2JsYW5rJyk7CiAgICB9LAogICAgLy8g5qOA5p+l5piv5ZCm5Li66auY57qn5qih5Z6LCiAgICBpc0hpZ2hQcmlvcml0eUVuZ2luZShlbmdpbmUpIHsKICAgICAgY29uc3QgcHJlbWl1bUVuZ2luZXMgPSBbJ2NoYXRncHQtNG8nLCAnY2hhdGdwdC00by1taW5pJywgJ2RlZXBzZWVrLXYzJywgJ2dlbWluaS0yLWZsYXNoJywgJ2RlZXBsJ107CiAgICAgIHJldHVybiBwcmVtaXVtRW5naW5lcy5pbmNsdWRlcyhlbmdpbmUpOwogICAgfSwKICAgIC8vIOS/neWtmE9wZW5BSemFjee9rgogICAgc2F2ZU9wZW5haUNvbmZpZygpIHsKICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTsKICAgIH0sCiAgICAvLyDkv53lrZhEZWVwU2Vla+mFjee9rgogICAgc2F2ZURlZXBzZWVrQ29uZmlnKCkgewogICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgfSwKICAgIC8vIOWIh+aNoui+k+WFpeahhuepuuagvOe/u+ivkQogICAgdG9nZ2xlSW5wdXRTcGFjZVRyYW5zbGF0aW9uKCkgewogICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgfSwKICAgIC8vIOWKoOi9veacjeWKoeWQr+eUqOeKtuaAgQogICAgbG9hZFNlcnZpY2VTdGF0ZXMoKSB7CiAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIChkYXRhKSA9PiB7CiAgICAgICAgLy8g5pu05paw5ZCE5pyN5Yqh55qE5ZCv55So54q25oCBCiAgICAgICAgdGhpcy5zZXJ2aWNlU3RhdGVzLm1pY3Jvc29mdGFwaSA9IGRhdGEubWljcm9zb2Z0YXBpRW5hYmxlZCAhPT0gZmFsc2U7CiAgICAgICAgdGhpcy5zZXJ2aWNlU3RhdGVzLm1pY3Jvc29mdCA9IGRhdGEubWljcm9zb2Z0RW5hYmxlZCAhPT0gZmFsc2U7CiAgICAgICAgdGhpcy5zZXJ2aWNlU3RhdGVzLmdvb2dsZSA9IGRhdGEuZ29vZ2xlRW5hYmxlZCAhPT0gZmFsc2U7CiAgICAgICAgdGhpcy5zZXJ2aWNlU3RhdGVzLm9wZW5haSA9IGRhdGEub3BlbmFpRW5hYmxlZCAhPT0gZmFsc2U7CiAgICAgICAgdGhpcy5zZXJ2aWNlU3RhdGVzLmRlZXBzZWVrID0gZGF0YS5kZWVwc2Vla0VuYWJsZWQgIT09IGZhbHNlOwogICAgICAgIAogICAgICAgIC8vIOajgOafpeW9k+WJjemAieS4reeahOe/u+ivkeW8leaTjuaYr+WQpuiiq+emgeeUqAogICAgICAgIGlmICh0aGlzLnRyYW5zRW5naW5lICYmICF0aGlzLnNlcnZpY2VTdGF0ZXNbdGhpcy50cmFuc0VuZ2luZV0pIHsKICAgICAgICAgIC8vIOWmguaenOW9k+WJjeW8leaTjuiiq+emgeeUqO+8jOWIh+aNouWIsOesrOS4gOS4quWPr+eUqOeahOW8leaTjgogICAgICAgICAgY29uc3QgYXZhaWxhYmxlRW5naW5lcyA9IE9iamVjdC5rZXlzKHRoaXMuc2VydmljZVN0YXRlcykuZmlsdGVyKGtleSA9PiB0aGlzLnNlcnZpY2VTdGF0ZXNba2V5XSk7CiAgICAgICAgICBpZiAoYXZhaWxhYmxlRW5naW5lcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHRoaXMudHJhbnNFbmdpbmUgPSBhdmFpbGFibGVFbmdpbmVzWzBdOwogICAgICAgICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5Yqg6L29QUnkuJPlrrbmmL7npLrnirbmgIEKICAgIGxvYWRBaUV4cGVydFZpc2liaWxpdHkoKSB7CiAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsnYWlFeHBlcnRWaXNpYmlsaXR5J10sIChyZXN1bHQpID0+IHsKICAgICAgICB0aGlzLmFpRXhwZXJ0VmlzaWJpbGl0eSA9IHJlc3VsdC5haUV4cGVydFZpc2liaWxpdHkgfHwge307CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOajgOafpUFJ5LiT5a625piv5ZCm5bqU6K+l5pi+56S6CiAgICBpc0V4cGVydFZpc2libGUoZXhwZXJ0VmFsdWUpIHsKICAgICAgLy8g5aaC5p6c5rKh5pyJ6K6+572u77yM6buY6K6k5pi+56S6CiAgICAgIGlmICh0aGlzLmFpRXhwZXJ0VmlzaWJpbGl0eVtleHBlcnRWYWx1ZV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLmFpRXhwZXJ0VmlzaWJpbGl0eVtleHBlcnRWYWx1ZV07CiAgICB9LAogICAgLy8g6I635Y+W55So5oi35L+h5oGv5bm25qOA5p+l5Lya5ZGY54q25oCBCiAgICBhc3luYyBnZXRVc2VySW5mbygpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ2F1dGhUb2tlbicsICd1c2VySW5mbyddLCAocmVzdWx0KSA9PiB7CiAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHsKICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+iOt+WPlueUqOaIt+S/oeaBr+Wksei0pTonLCBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpOwogICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBjb25zb2xlLmxvZygn6I635Y+W5Yiw55qE55So5oi35L+h5oGvOicsIHJlc3VsdCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAocmVzdWx0LmF1dGhUb2tlbiAmJiByZXN1bHQudXNlckluZm8pIHsKICAgICAgICAgICAgICB0aGlzLnVzZXJJbmZvID0gcmVzdWx0LnVzZXJJbmZvOwogICAgICAgICAgICAgIAogICAgICAgICAgICAgIC8vIOajgOafpeeUqOaIt3BsYW7nirbmgIHvvIzlpoLmnpzkuI3mmK8nZnJlZSfliJnkuLrkvJrlkZjnlKjmiLcKICAgICAgICAgICAgICBpZiAodGhpcy51c2VySW5mby5wbGFuICYmIHRoaXMudXNlckluZm8ucGxhbiAhPT0gJ2ZyZWUnKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzUHJlbWl1bVVzZXIgPSB0cnVlOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+ajgOa1i+WIsOS8muWRmOeUqOaItywgcGxhbjonLCB0aGlzLnVzZXJJbmZvLnBsYW4pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzUHJlbWl1bVVzZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfmo4DmtYvliLDlhY3otLnnlKjmiLcnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy51c2VySW5mbyA9IG51bGw7CiAgICAgICAgICAgICAgdGhpcy5pc1ByZW1pdW1Vc2VyID0gZmFsc2U7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+eUqOaIt+acqueZu+W9lScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICByZXNvbHZlKHRoaXMudXNlckluZm8pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcign6I635Y+W55So5oi35L+h5oGv5pe25Ye66ZSZOicsIGVycm9yKTsKICAgICAgICB0aGlzLnVzZXJJbmZvID0gbnVsbDsKICAgICAgICB0aGlzLmlzUHJlbWl1bVVzZXIgPSBmYWxzZTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICBleGNsdWRlZENsYXNzZXM6IHsKICAgICAgaGFuZGxlcihuZXdWYWwpIHsKICAgICAgICB0aGlzLmV4Y2x1ZGVkQ2xhc3Nlc1N0ciA9IG5ld1ZhbC5qb2luKCcsICcpCiAgICAgIH0sCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIC8vIOebkeWQrGFwaUtleXPlj5jljJYKICAgIGFwaUtleXM6IHsKICAgICAgaGFuZGxlcihuZXdLZXlzKSB7CiAgICAgICAgLy8g5aaC5p6c5b2T5YmN5pivQUnlvJXmk47vvIzmo4Dmn6XmmK/lkKbmnInlr7nlupTnmoRBUEkgS2V5CiAgICAgICAgY29uc3QgZW5naW5lID0gdGhpcy50cmFuc0VuZ2luZTsKICAgICAgICBpZiAoKGVuZ2luZSA9PT0gJ29wZW5haScgfHwgZW5naW5lID09PSAnZGVlcHNlZWsnKSAmJiBuZXdLZXlzKSB7CiAgICAgICAgICBjb25zdCBhcGlLZXkgPSBuZXdLZXlzW2VuZ2luZV07CiAgICAgICAgICB0aGlzLnNob3dBcGlLZXlOb3RpY2UgPSAhYXBpS2V5IHx8IGFwaUtleS50cmltKCkgPT09ICcnOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGVlcDogdHJ1ZQogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdsb2FkU2V0dGluZ3MnKS50aGVuKCgpID0+IHsKICAgICAgLy8g5qOA5p+l5b2T5YmN5byV5pOO5piv5ZCm6ZyA6KaBQVBJIEtleeaPkOekugogICAgICBjb25zdCBlbmdpbmUgPSB0aGlzLnRyYW5zRW5naW5lOwogICAgICBpZiAoKGVuZ2luZSA9PT0gJ29wZW5haScgfHwgZW5naW5lID09PSAnZGVlcHNlZWsnKSAmJiB0aGlzLiRzdG9yZS5zdGF0ZS5hcGlLZXlzKSB7CiAgICAgICAgaWYgKCF0aGlzLiRzdG9yZS5zdGF0ZS5hcGlLZXlzW2VuZ2luZV0gfHwgdGhpcy4kc3RvcmUuc3RhdGUuYXBpS2V5c1tlbmdpbmVdLnRyaW0oKSA9PT0gJycpIHsKICAgICAgICAgIHRoaXMuc2hvd0FwaUtleU5vdGljZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCiAgICAvLyDojrflj5bnlKjmiLfkv6Hmga/lubbmo4Dmn6XkvJrlkZjnirbmgIEKICAgIHRoaXMuZ2V0VXNlckluZm8oKTsKCiAgICAvLyDku45sb2NhbFN0b3JhZ2XkuK3ojrflj5blt7Lkv53lrZjnmoTnlYzpnaLor63oqIDorr7nva4KICAgIGNvbnN0IHNhdmVkTGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndHJhbnNvci11aS1sYW5ndWFnZScpOwogICAgaWYgKHNhdmVkTGFuZ3VhZ2UpIHsKICAgICAgdGhpcy51aUxhbmd1YWdlID0gc2F2ZWRMYW5ndWFnZTsKICAgICAgdGhpcy5sb2FkTGFuZ3VhZ2VSZXNvdXJjZXMoc2F2ZWRMYW5ndWFnZSk7CiAgICB9CgogICAgLy8g5qOA5p+l5YWo5bGAaTE4buaYr+WQpuW3suWPr+eUqAogICAgaWYgKHdpbmRvdy5pMThuKSB7CiAgICAgIHRoaXMuaTE4biA9IHdpbmRvdy5pMThuOwogICAgfSBlbHNlIHsKICAgICAgLy8g5bCd6K+V5Yqg6L295rWP6KeI5Zmo5omp5bGV55qEaTE4bgogICAgICB0cnkgewogICAgICAgIGlmIChjaHJvbWUgJiYgY2hyb21lLmkxOG4pIHsKICAgICAgICAgIC8vIOWIm+W7uueugOWNleeahOWMheijheWZqOWMuemFjeaIkeS7rOeahGkxOG7mjqXlj6MKICAgICAgICAgIHRoaXMuaTE4biA9IHsKICAgICAgICAgICAgdDogKGtleSkgPT4gY2hyb21lLmkxOG4uZ2V0TWVzc2FnZShrZXkpIHx8IGtleQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oJ+aXoOazleWKoOi9vWNocm9tZS5pMThuOicsIGUpOwogICAgICB9CiAgICB9CiAgICAKICAgIC8vIOWKoOi9veacjeWKoeWQr+eUqOeKtuaAgQogICAgdGhpcy5sb2FkU2VydmljZVN0YXRlcygpOwogICAgCiAgICAvLyDliqDovb1BSeS4k+WutuaYvuekuueKtuaAgQogICAgdGhpcy5sb2FkQWlFeHBlcnRWaXNpYmlsaXR5KCk7CiAgICAKICAgIC8vIOebkeWQrCBzdG9yYWdlIOWPmOWMlgogICAgdGhpcy5zdG9yYWdlTGlzdGVuZXIgPSAoY2hhbmdlcywgbmFtZXNwYWNlKSA9PiB7CiAgICAgIGlmIChuYW1lc3BhY2UgPT09ICdzeW5jJykgewogICAgICAgIC8vIOajgOafpeaYr+WQpuacieacjeWKoeeKtuaAgeeahOWPmOWMlgogICAgICAgIGNvbnN0IHNlcnZpY2VLZXlzID0gWydtaWNyb3NvZnRhcGlFbmFibGVkJywgJ21pY3Jvc29mdEVuYWJsZWQnLCAnZ29vZ2xlRW5hYmxlZCcsICdvcGVuYWlFbmFibGVkJywgJ2RlZXBzZWVrRW5hYmxlZCddOwogICAgICAgIGNvbnN0IGhhc1NlcnZpY2VDaGFuZ2UgPSBPYmplY3Qua2V5cyhjaGFuZ2VzKS5zb21lKGtleSA9PiBzZXJ2aWNlS2V5cy5pbmNsdWRlcyhrZXkpKTsKICAgICAgICAKICAgICAgICBpZiAoaGFzU2VydmljZUNoYW5nZSkgewogICAgICAgICAgLy8g6YeN5paw5Yqg6L295pyN5Yqh54q25oCBCiAgICAgICAgICB0aGlzLmxvYWRTZXJ2aWNlU3RhdGVzKCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIOajgOafpeaYr+WQpuaciUFJ5LiT5a625pi+56S654q25oCB55qE5Y+Y5YyWCiAgICAgICAgaWYgKGNoYW5nZXMuYWlFeHBlcnRWaXNpYmlsaXR5KSB7CiAgICAgICAgICB0aGlzLmxvYWRBaUV4cGVydFZpc2liaWxpdHkoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgCiAgICAgIC8vIOebkeWQrGxvY2Fs5a2Y5YKo5Lit55qE55So5oi35L+h5oGv5Y+Y5YyWCiAgICAgIGlmIChuYW1lc3BhY2UgPT09ICdsb2NhbCcpIHsKICAgICAgICBpZiAoY2hhbmdlcy5hdXRoVG9rZW4gfHwgY2hhbmdlcy51c2VySW5mbykgewogICAgICAgICAgY29uc29sZS5sb2coJ+ajgOa1i+WIsOeUqOaIt+eZu+W9leeKtuaAgeWPmOWMlu+8jOmHjeaWsOiOt+WPlueUqOaIt+S/oeaBrycpOwogICAgICAgICAgdGhpcy5nZXRVc2VySW5mbygpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIGNocm9tZS5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcih0aGlzLnN0b3JhZ2VMaXN0ZW5lcik7CiAgfSwKICBtb3VudGVkKCkgewogICAgLy8g5re75Yqg5YWo5bGA5b+r5o236ZSu55uR5ZCsCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlib2FyZFNob3J0Y3V0KTsKCiAgICAvLyDlj5HpgIHmtojmga/nu5nlkI7lj7DohJrmnKzvvIzpgJrnn6XlroPorr7nva7lhajlsYDlv6vmjbfplK4KICAgIHRyeSB7CiAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsKICAgICAgICBhY3Rpb246ICJyZWdpc3RlclNob3J0Y3V0IiwKICAgICAgICBzaG9ydGN1dDogImFsdEEiCiAgICAgIH0sIChyZXNwb25zZSkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCfms6jlhozlhajlsYDlv6vmjbfplK7lk43lupQ6JywgcmVzcG9uc2UpOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+azqOWGjOWFqOWxgOW/q+aNt+mUruWksei0pTonLCBlcnJvcik7CiAgICB9CgogICAgLy8g55uR5ZCs5p2l6Ieq5ZCO5Y+w55qE5b+r5o236ZSu5raI5oGvCiAgICB0cnkgewogICAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UpID0+IHsKICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdzaG9ydGN1dFRyaWdnZXJlZCcgJiYgbWVzc2FnZS5zaG9ydGN1dCA9PT0gJ2FsdEEnKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygn5o6l5pS25Yiw5ZCO5Y+w5b+r5o236ZSu6Kem5Y+R5raI5oGvJyk7CiAgICAgICAgICB0aGlzLnRvZ2dsZVRyYW5zbGF0aW9uKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+iuvue9ruW/q+aNt+mUrua2iOaBr+ebkeWQrOWksei0pTonLCBlcnJvcik7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgLy8g56e76Zmk5YWo5bGA5b+r5o236ZSu55uR5ZCsCiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlib2FyZFNob3J0Y3V0KTsKICAgIAogICAgLy8g56e76ZmkIHN0b3JhZ2Ug5Y+Y5YyW55uR5ZCs5ZmoCiAgICBpZiAodGhpcy5zdG9yYWdlTGlzdGVuZXIpIHsKICAgICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLnJlbW92ZUxpc3RlbmVyKHRoaXMuc3RvcmFnZUxpc3RlbmVyKTsKICAgIH0KICB9Cn0K"},null]}