{"remainingRequest":"/Users/yankaikuo/Transor/transor-extension/node_modules/thread-loader/dist/cjs.js!/Users/yankaikuo/Transor/transor-extension/node_modules/babel-loader/lib/index.js!/Users/yankaikuo/Transor/transor-extension/node_modules/eslint-loader/index.js??ref--14-0!/Users/yankaikuo/Transor/transor-extension/src/store/index.js","dependencies":[{"path":"/Users/yankaikuo/Transor/transor-extension/src/store/index.js","mtime":1748449298803},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/cache-loader/dist/cjs.js","mtime":1744643640207},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/thread-loader/dist/cjs.js","mtime":1744643640207},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/babel-loader/lib/index.js","mtime":1744643640966},{"path":"/Users/yankaikuo/Transor/transor-extension/node_modules/eslint-loader/index.js","mtime":1744643640278}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}